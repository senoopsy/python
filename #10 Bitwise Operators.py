Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 16:52:21) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license()" for more information.
>>>          # Bitwise Operators
         
>>> # There are 6 Types in Bitwise Operators
>>>    #1 Complement (~)
>>>    #2 And (&)
>>>    #3 OR (|)
>>>    #4 XOR (^)
>>>    #5 Left Shift (<<)
>>>    #6 Right Shift (>>)
>>> 
>>> 
>>> # Complement (~) -: Complement is Reverse of Binary Format
>>> ~12
-13
>>> bin(12)
'0b1100'
>>> 00001100

>>> # 00001100
>>> # --------
>>> # 11110011
>>> bin(13)
'0b1101'
>>> # 00001101
>>> # --------
>>> # 11110010
>>> #      + 1
>>> # --------
>>> # 11110011 = ~12 = -13
>>> 
>>> ~16
-17
>>> ~18
-19
>>> 
>>> 
>>> # And (&) -: in And if Both are True(1) then only we get True(1)
>>> # x  y  xy
>>> # 0  0  0
>>> # 0  1  0
>>> # 1  0  0
>>> # 1  1  1
>>> 12 & 13
12
>>> bin(12)
'0b1100'
>>> bin(13)
'0b1101'
>>> # 00001100
>>> # 00001101
>>> # --------
>>> # 00001100 = 12
>>> # 12 & 13 = 12
>>> 12 & 17
0
>>> # 00001100
>>> # 00010001
>>> # --------
>>> # 00000000 = 0
>>> # 12 & 17 = 0
>>> 
>>> 25 & 30
24
>>> bin(25)
'0b11001'
>>> bin(30)
'0b11110'
>>> # 00011001
>>> # 00011110
>>> # --------
>>> # 00011000
>>> 0b11000
24
>>> 
>>> 
>>> # OR (|) -: in 'OR' if any one are True(1) we will get True(1)
>>> # x  y  xy
>>> # 0  0  0
>>> # 1  0  1
>>> # 0  1  1
>>> # 1  1  1
>>> 
>>> 12 | 13
13
>>> bin(12)
'0b1100'
>>> bin(13)
'0b1101'
>>> # 00001100
>>> # 00001101
>>> # --------
>>> # 00001101
>>> 0b1101
13
>>> 12 | 17
29
>>> bin(12)
'0b1100'
>>> bin(17)
'0b10001'
>>> # 00001100
>>> # 00010001
>>> # --------
>>> # 00011101
>>> 0b11101
29
>>> 
>>> 
>>> # XOR (^) -: in 'XOR' when both are different numbers then go for 1
>>> 
>>> # x  y  xy
>>> # 0  0  0
>>> # 1  0  1
>>> # 0  1  1
>>> # 1  1  1
>>> 
>>> 12 ^ 17
29
>>> bin(12)
'0b1100'
>>> bin(17)
'0b10001'
>>> # 00001100
>>> # 00010001
>>> # --------
>>> # 00011101
>>> 0b11101
29
>>> 3 ^ 4
7
>>> bin(3)
'0b11'
>>> bin(4)
'0b100'
>>> # 00000011
>>> # 00000100
>>> # --------
>>> # 00000111
>>> 0b111
7
>>> 25 ^ 30
7
>>> bin(25)
'0b11001'
>>> bin(30)
'0b11110'
>>> # 00011001
>>> # 00011110
>>> # --------
>>> # 00000111
>>> 0b111
7
>>> 
>>> 
>>> # Left Shift (<<) -: in left shift we are gain bits from right to left
>>> 17 << 2
 68
>>> # 10001 + 00
>>> # 1000100
>>> 0b1000100
 68
>>> 12 << 3
 96
>>> # 1100 + 000
>>> # 1100000
>>> 0b1100000
 96
>>>
>>>
>>> # Rigth Shift (>>) -: in right shift we are loss bits from lesft to right
>>> 17 >> 2
 4 
>>> # 10001 - 2 bits
>>> # 100
>>> 0b100
4
>>> 12 >> 3
 1
>>> # 1100 - 3 bits 
>>> # 1
>>> 0b1
 1

